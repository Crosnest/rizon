// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tokenswap/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTokenswapRequest is request type for the Query/Tokenswap RPC method
type QueryTokenswapRequest struct {
	// tx_hash defines the tx hash to query for
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *QueryTokenswapRequest) Reset()         { *m = QueryTokenswapRequest{} }
func (m *QueryTokenswapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenswapRequest) ProtoMessage()    {}
func (*QueryTokenswapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e2d8bbc02c3d4f0, []int{0}
}
func (m *QueryTokenswapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenswapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenswapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenswapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenswapRequest.Merge(m, src)
}
func (m *QueryTokenswapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenswapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenswapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenswapRequest proto.InternalMessageInfo

func (m *QueryTokenswapRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// QueryTokenswapResponse is response type for the Query/Tokenswap RPC method
type QueryTokenswapResponse struct {
	// tokenswap defines the tokenswap info
	Tokenswap *Tokenswap `protobuf:"bytes,1,opt,name=tokenswap,proto3" json:"tokenswap,omitempty"`
}

func (m *QueryTokenswapResponse) Reset()         { *m = QueryTokenswapResponse{} }
func (m *QueryTokenswapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenswapResponse) ProtoMessage()    {}
func (*QueryTokenswapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e2d8bbc02c3d4f0, []int{1}
}
func (m *QueryTokenswapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenswapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenswapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenswapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenswapResponse.Merge(m, src)
}
func (m *QueryTokenswapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenswapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenswapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenswapResponse proto.InternalMessageInfo

func (m *QueryTokenswapResponse) GetTokenswap() *Tokenswap {
	if m != nil {
		return m.Tokenswap
	}
	return nil
}

// QuerySwappedAmountRequest is request type for the Query/SwappedAmount RPC method
type QuerySwappedAmountRequest struct {
}

func (m *QuerySwappedAmountRequest) Reset()         { *m = QuerySwappedAmountRequest{} }
func (m *QuerySwappedAmountRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySwappedAmountRequest) ProtoMessage()    {}
func (*QuerySwappedAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e2d8bbc02c3d4f0, []int{2}
}
func (m *QuerySwappedAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwappedAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwappedAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwappedAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwappedAmountRequest.Merge(m, src)
}
func (m *QuerySwappedAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwappedAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwappedAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwappedAmountRequest proto.InternalMessageInfo

// QuerySwappedAmountResponse is response type for the Query/SwappedAmount RPC method
type QuerySwappedAmountResponse struct {
	// amount defines current swapped amount of tokenswap
	SwappedAmount SwappedAmount `protobuf:"bytes,1,opt,name=swapped_amount,json=swappedAmount,proto3" json:"swapped_amount"`
}

func (m *QuerySwappedAmountResponse) Reset()         { *m = QuerySwappedAmountResponse{} }
func (m *QuerySwappedAmountResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySwappedAmountResponse) ProtoMessage()    {}
func (*QuerySwappedAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e2d8bbc02c3d4f0, []int{3}
}
func (m *QuerySwappedAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySwappedAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySwappedAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySwappedAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySwappedAmountResponse.Merge(m, src)
}
func (m *QuerySwappedAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySwappedAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySwappedAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySwappedAmountResponse proto.InternalMessageInfo

func (m *QuerySwappedAmountResponse) GetSwappedAmount() SwappedAmount {
	if m != nil {
		return m.SwappedAmount
	}
	return SwappedAmount{}
}

// QueryParamsRequest is request type for the Query/Params RPC method
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e2d8bbc02c3d4f0, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method
type QueryParamsResponse struct {
	// params defines the parameters of tokenswap
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e2d8bbc02c3d4f0, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryTokenswapRequest)(nil), "rizonworld.rizon.tokenswap.QueryTokenswapRequest")
	proto.RegisterType((*QueryTokenswapResponse)(nil), "rizonworld.rizon.tokenswap.QueryTokenswapResponse")
	proto.RegisterType((*QuerySwappedAmountRequest)(nil), "rizonworld.rizon.tokenswap.QuerySwappedAmountRequest")
	proto.RegisterType((*QuerySwappedAmountResponse)(nil), "rizonworld.rizon.tokenswap.QuerySwappedAmountResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "rizonworld.rizon.tokenswap.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "rizonworld.rizon.tokenswap.QueryParamsResponse")
}

func init() { proto.RegisterFile("tokenswap/query.proto", fileDescriptor_0e2d8bbc02c3d4f0) }

var fileDescriptor_0e2d8bbc02c3d4f0 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x8b, 0x13, 0x31,
	0x18, 0xc6, 0x27, 0xfe, 0x19, 0x69, 0x64, 0x3d, 0xc4, 0xfd, 0xd7, 0x28, 0xb3, 0xcb, 0xc0, 0xa2,
	0x1e, 0x36, 0xd1, 0x8a, 0x9e, 0x75, 0xbd, 0xec, 0x51, 0xab, 0x28, 0x08, 0xb2, 0x64, 0xdd, 0x30,
	0x33, 0xb8, 0x9d, 0x64, 0x27, 0x19, 0xda, 0x2a, 0x5e, 0x3c, 0x7a, 0x12, 0xfc, 0x02, 0xfa, 0x6d,
	0x7a, 0x2c, 0x78, 0x11, 0x04, 0x91, 0xd6, 0x0f, 0x22, 0x4d, 0xd2, 0x99, 0x8e, 0x1d, 0x5b, 0x7b,
	0x0b, 0xf3, 0xbc, 0xcf, 0xfb, 0xfc, 0xf2, 0xbe, 0x19, 0xb8, 0xa1, 0xc5, 0x1b, 0x9e, 0xaa, 0x2e,
	0x93, 0xf4, 0x2c, 0xe7, 0x59, 0x9f, 0xc8, 0x4c, 0x68, 0x81, 0x70, 0x96, 0xbc, 0x15, 0x69, 0x57,
	0x64, 0xa7, 0x27, 0xc4, 0x1c, 0x49, 0x51, 0x87, 0xd7, 0x23, 0x11, 0x09, 0x53, 0x46, 0x27, 0x27,
	0xeb, 0xc0, 0xd7, 0x23, 0x21, 0xa2, 0x53, 0x4e, 0x99, 0x4c, 0x28, 0x4b, 0x53, 0xa1, 0x99, 0x4e,
	0x44, 0xaa, 0x9c, 0xda, 0x2c, 0x63, 0x8a, 0x93, 0x93, 0x36, 0x4b, 0x49, 0xb2, 0x8c, 0x75, 0x9c,
	0x25, 0xbc, 0x0d, 0x37, 0x9e, 0x4c, 0x88, 0x9e, 0x4d, 0xe5, 0x36, 0x3f, 0xcb, 0xb9, 0xd2, 0x68,
	0x0b, 0x5e, 0xd2, 0xbd, 0xa3, 0x98, 0xa9, 0x78, 0x1b, 0xec, 0x82, 0x9b, 0x8d, 0xb6, 0xaf, 0x7b,
	0x87, 0x4c, 0xc5, 0xe1, 0x2b, 0xb8, 0xf9, 0xb7, 0x43, 0x49, 0x91, 0x2a, 0x8e, 0x1e, 0xc1, 0x46,
	0x91, 0x62, 0x4c, 0x97, 0x5b, 0x7b, 0xe4, 0xdf, 0x57, 0x24, 0x65, 0x87, 0xd2, 0x17, 0x5e, 0x83,
	0x4d, 0xd3, 0xfe, 0x69, 0x97, 0x49, 0xc9, 0x4f, 0x1e, 0x76, 0x44, 0x9e, 0x6a, 0x07, 0x15, 0x6a,
	0x88, 0xeb, 0x44, 0x97, 0xff, 0x1c, 0x5e, 0x51, 0x56, 0x38, 0x62, 0x46, 0x71, 0x10, 0xb7, 0x16,
	0x41, 0x54, 0x5a, 0x1d, 0x5c, 0x18, 0xfc, 0xdc, 0xf1, 0xda, 0x6b, 0x6a, 0xf6, 0x63, 0xb8, 0x0e,
	0x91, 0x49, 0x7d, 0x6c, 0x06, 0x37, 0x65, 0x79, 0x01, 0xaf, 0x56, 0xbe, 0x3a, 0x88, 0x07, 0xd0,
	0xb7, 0x03, 0x76, 0xe1, 0xe1, 0xa2, 0x70, 0xeb, 0x75, 0xa9, 0xce, 0xd7, 0xfa, 0x71, 0x1e, 0x5e,
	0x34, 0x9d, 0xd1, 0x57, 0x00, 0x1b, 0xc5, 0x90, 0xd0, 0x9d, 0x45, 0x9d, 0x6a, 0x97, 0x88, 0x5b,
	0xab, 0x58, 0xec, 0x05, 0xc2, 0xfd, 0x0f, 0xdf, 0x7e, 0x7f, 0x3e, 0x77, 0x03, 0xed, 0x51, 0x63,
	0xa0, 0x35, 0x6f, 0x4a, 0xd1, 0x77, 0xee, 0x6d, 0xbc, 0x47, 0x5f, 0x00, 0x5c, 0xab, 0xcc, 0x10,
	0xdd, 0x5b, 0x1a, 0x5a, 0xb7, 0x5b, 0x7c, 0x7f, 0x55, 0x9b, 0xe3, 0xdd, 0x35, 0xbc, 0x18, 0x6d,
	0xcf, 0xf1, 0xba, 0x2d, 0xa2, 0x8f, 0x00, 0xfa, 0x76, 0xd2, 0x88, 0x2c, 0x0d, 0xa9, 0x2c, 0x19,
	0xd3, 0xff, 0xae, 0x77, 0x34, 0x3b, 0x86, 0xa6, 0x89, 0xb6, 0xe6, 0x68, 0xec, 0x76, 0x0f, 0x0e,
	0x07, 0xa3, 0x00, 0x0c, 0x47, 0x01, 0xf8, 0x35, 0x0a, 0xc0, 0xa7, 0x71, 0xe0, 0x0d, 0xc7, 0x81,
	0xf7, 0x7d, 0x1c, 0x78, 0x2f, 0x49, 0x94, 0xe8, 0x38, 0x3f, 0x26, 0xaf, 0x45, 0xc7, 0x9a, 0xf7,
	0x4d, 0xac, 0x6b, 0xd4, 0x9b, 0x5d, 0x44, 0x5f, 0x72, 0x75, 0xec, 0x9b, 0x3f, 0xf8, 0xee, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xa6, 0xbb, 0x4b, 0x4f, 0x5d, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Tokenswap queries tokenswap item for given tx hash
	Tokenswap(ctx context.Context, in *QueryTokenswapRequest, opts ...grpc.CallOption) (*QueryTokenswapResponse, error)
	// SwappedAmount queries current swapped amount of tokenswap
	SwappedAmount(ctx context.Context, in *QuerySwappedAmountRequest, opts ...grpc.CallOption) (*QuerySwappedAmountResponse, error)
	// Params queries parameters of tokenswap
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Tokenswap(ctx context.Context, in *QueryTokenswapRequest, opts ...grpc.CallOption) (*QueryTokenswapResponse, error) {
	out := new(QueryTokenswapResponse)
	err := c.cc.Invoke(ctx, "/rizonworld.rizon.tokenswap.Query/Tokenswap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SwappedAmount(ctx context.Context, in *QuerySwappedAmountRequest, opts ...grpc.CallOption) (*QuerySwappedAmountResponse, error) {
	out := new(QuerySwappedAmountResponse)
	err := c.cc.Invoke(ctx, "/rizonworld.rizon.tokenswap.Query/SwappedAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/rizonworld.rizon.tokenswap.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Tokenswap queries tokenswap item for given tx hash
	Tokenswap(context.Context, *QueryTokenswapRequest) (*QueryTokenswapResponse, error)
	// SwappedAmount queries current swapped amount of tokenswap
	SwappedAmount(context.Context, *QuerySwappedAmountRequest) (*QuerySwappedAmountResponse, error)
	// Params queries parameters of tokenswap
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Tokenswap(ctx context.Context, req *QueryTokenswapRequest) (*QueryTokenswapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokenswap not implemented")
}
func (*UnimplementedQueryServer) SwappedAmount(ctx context.Context, req *QuerySwappedAmountRequest) (*QuerySwappedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwappedAmount not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Tokenswap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenswapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Tokenswap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rizonworld.rizon.tokenswap.Query/Tokenswap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Tokenswap(ctx, req.(*QueryTokenswapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SwappedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwappedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SwappedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rizonworld.rizon.tokenswap.Query/SwappedAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SwappedAmount(ctx, req.(*QuerySwappedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rizonworld.rizon.tokenswap.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rizonworld.rizon.tokenswap.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tokenswap",
			Handler:    _Query_Tokenswap_Handler,
		},
		{
			MethodName: "SwappedAmount",
			Handler:    _Query_SwappedAmount_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokenswap/query.proto",
}

func (m *QueryTokenswapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenswapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenswapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenswapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenswapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenswapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tokenswap != nil {
		{
			size, err := m.Tokenswap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySwappedAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwappedAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwappedAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySwappedAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySwappedAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySwappedAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SwappedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTokenswapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenswapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tokenswap != nil {
		l = m.Tokenswap.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySwappedAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySwappedAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SwappedAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTokenswapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenswapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenswapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenswapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenswapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenswapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokenswap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tokenswap == nil {
				m.Tokenswap = &Tokenswap{}
			}
			if err := m.Tokenswap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwappedAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwappedAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwappedAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySwappedAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySwappedAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySwappedAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwappedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwappedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
