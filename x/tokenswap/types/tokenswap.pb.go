// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tokenswap/tokenswap.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Tokenswap defines the tokenswap state
type Tokenswap struct {
	// tx_hash is the tx hash of burn tx from legacy chain
	// tx_hash is used for store key
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// receiver is the target of tokenswap
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// signer is who confirms the swap process
	Signer string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
	// amount is the amount of swap process
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *Tokenswap) Reset()         { *m = Tokenswap{} }
func (m *Tokenswap) String() string { return proto.CompactTextString(m) }
func (*Tokenswap) ProtoMessage()    {}
func (*Tokenswap) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d629b6217c68710, []int{0}
}
func (m *Tokenswap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tokenswap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tokenswap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tokenswap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tokenswap.Merge(m, src)
}
func (m *Tokenswap) XXX_Size() int {
	return m.Size()
}
func (m *Tokenswap) XXX_DiscardUnknown() {
	xxx_messageInfo_Tokenswap.DiscardUnknown(m)
}

var xxx_messageInfo_Tokenswap proto.InternalMessageInfo

func (m *Tokenswap) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Tokenswap) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *Tokenswap) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *Tokenswap) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*Tokenswap)(nil), "rizonworld.rizon.tokenswap.Tokenswap")
}

func init() { proto.RegisterFile("tokenswap/tokenswap.proto", fileDescriptor_0d629b6217c68710) }

var fileDescriptor_0d629b6217c68710 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0x8a, 0x02, 0x35, 0x5b, 0x84, 0x20, 0xcd, 0xe0, 0x56, 0x4c, 0x5d, 0x6a, 0x53,
	0x78, 0x83, 0xb2, 0x74, 0xae, 0x98, 0x58, 0x90, 0x93, 0x5a, 0x89, 0x55, 0xea, 0x5b, 0xd9, 0xee,
	0x0f, 0x3c, 0x05, 0xcf, 0xc1, 0x3b, 0xb0, 0x77, 0xec, 0xc8, 0x04, 0x28, 0x79, 0x11, 0x14, 0x3b,
	0x44, 0x9d, 0xee, 0xb9, 0xba, 0xf7, 0x1c, 0x1d, 0x7d, 0xb8, 0x67, 0x61, 0x21, 0x94, 0xd9, 0xf2,
	0x15, 0x6b, 0x15, 0x5d, 0x69, 0xb0, 0x10, 0x25, 0x5a, 0xbe, 0x81, 0xda, 0x82, 0x7e, 0x99, 0x53,
	0x27, 0x69, 0xfb, 0x91, 0x5c, 0xe6, 0x90, 0x83, 0x7b, 0x63, 0xb5, 0xf2, 0x8e, 0x84, 0x64, 0x60,
	0x96, 0x60, 0x58, 0xca, 0x8d, 0x60, 0x9b, 0x71, 0x2a, 0x2c, 0x1f, 0xb3, 0x0c, 0xa4, 0xf2, 0xf7,
	0x9b, 0x4f, 0x84, 0xbb, 0x8f, 0xff, 0x19, 0xd1, 0x35, 0x3e, 0xb3, 0xbb, 0xe7, 0x82, 0x9b, 0x22,
	0x46, 0x03, 0x34, 0xec, 0xce, 0x42, 0xbb, 0x9b, 0x72, 0x53, 0x44, 0x09, 0x3e, 0xd7, 0x22, 0x13,
	0x72, 0x23, 0x74, 0x7c, 0xe2, 0x2e, 0xed, 0x1e, 0x5d, 0xe1, 0xd0, 0xc8, 0x5c, 0x09, 0x1d, 0x77,
	0xbc, 0xc7, 0x6f, 0x51, 0x86, 0x43, 0xbe, 0x84, 0xb5, 0xb2, 0xf1, 0xe9, 0xa0, 0x33, 0xbc, 0xb8,
	0xeb, 0x51, 0xdf, 0x85, 0xd6, 0x5d, 0x68, 0xd3, 0x85, 0x3e, 0x80, 0x54, 0x93, 0xdb, 0xfd, 0x77,
	0x3f, 0xf8, 0xf8, 0xe9, 0x0f, 0x73, 0x69, 0x8b, 0x75, 0x4a, 0x33, 0x58, 0xb2, 0xa6, 0xb8, 0x1f,
	0x23, 0x33, 0x5f, 0x30, 0xfb, 0xba, 0x12, 0xc6, 0x19, 0xcc, 0xac, 0x89, 0x9e, 0x4c, 0xf7, 0x25,
	0x41, 0x87, 0x92, 0xa0, 0xdf, 0x92, 0xa0, 0xf7, 0x8a, 0x04, 0x87, 0x8a, 0x04, 0x5f, 0x15, 0x09,
	0x9e, 0xe8, 0x51, 0x96, 0x63, 0x35, 0x72, 0xdc, 0xbc, 0x66, 0x3b, 0x76, 0x44, 0xb9, 0xce, 0x4d,
	0x43, 0x07, 0xe4, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x61, 0xff, 0x37, 0xeb, 0x7f, 0x01, 0x00,
	0x00,
}

func (m *Tokenswap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tokenswap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tokenswap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTokenswap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTokenswap(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTokenswap(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTokenswap(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenswap(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenswap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tokenswap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTokenswap(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTokenswap(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTokenswap(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTokenswap(uint64(l))
		}
	}
	return n
}

func sovTokenswap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenswap(x uint64) (n int) {
	return sovTokenswap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tokenswap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenswap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tokenswap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tokenswap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenswap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenswap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenswap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTokenswap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenswap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenswap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenswap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenswap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenswap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenswap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenswap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenswap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenswap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenswap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenswap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenswap = fmt.Errorf("proto: unexpected end of group")
)
